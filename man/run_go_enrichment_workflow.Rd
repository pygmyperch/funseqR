% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/go_workflow.R
\name{run_go_enrichment_workflow}
\alias{run_go_enrichment_workflow}
\title{GO Enrichment Workflow Functions}
\usage{
run_go_enrichment_workflow(
  con,
  candidate_vcf_file,
  background_file_id = NULL,
  candidate_blast_param_id = NULL,
  background_blast_param_id = NULL,
  ontologies = c("BP", "MF"),
  min_genes = 5,
  max_genes = 500,
  store_results = TRUE,
  create_plots = TRUE,
  verbose = TRUE
)
}
\arguments{
\item{con}{Database connection object}

\item{candidate_vcf_file}{Character. Path to candidate VCF file}

\item{background_file_id}{Integer. File ID of background dataset (or NULL to auto-detect)}

\item{candidate_blast_param_id}{Integer. Optional. Specific BLAST run ID for candidate annotations.
If NULL, uses all available annotations. Default is NULL.}

\item{background_blast_param_id}{Integer. Optional. Specific BLAST run ID for background annotations.
If NULL, uses all available annotations. Default is NULL.}

\item{ontologies}{Character vector. GO ontologies to test: c("BP", "MF", "CC"). Default is c("BP", "MF")}

\item{min_genes}{Integer. Minimum genes for GO term testing. Default is 5}

\item{max_genes}{Integer. Maximum genes for GO term testing. Default is 500}

\item{store_results}{Logical. Store results in database. Default is TRUE}

\item{create_plots}{Logical. Generate visualization plots. Default is TRUE}

\item{verbose}{Logical. Print progress information. Default is TRUE}
}
\value{
List containing all analysis results, plots, and summary tables
}
\description{
High-level wrapper functions for complete GO enrichment workflows
}
\details{
Complete GO enrichment analysis workflow

This function performs a complete GO enrichment workflow:
\enumerate{
\item Import candidate loci file
\item Link to existing annotations
\item Extract GO terms for both datasets (optionally filtered by BLAST run)
\item Perform enrichment testing for specified ontologies
\item Create visualizations
\item Store results in database (optional)
}

The blast_param_id parameters allow you to compare different annotation strategies
(e.g., ORF sequences vs raw sequences) by using only annotations from specific
BLAST runs. This enables comparative functional genomics analysis.
}
\examples{
\dontrun{
con <- connect_funseq_db("analysis.db")

# Use all available annotations (default behavior)
results <- run_go_enrichment_workflow(con, "candidates.vcf")

# Compare ORF-based vs raw sequence annotations
results_orf <- run_go_enrichment_workflow(con, "candidates.vcf", 
                                          candidate_blast_param_id = 1,
                                          background_blast_param_id = 1)
results_raw <- run_go_enrichment_workflow(con, "candidates.vcf",
                                          candidate_blast_param_id = 2, 
                                          background_blast_param_id = 2)

print(results_orf$summary)
print(results_orf$plots$BP_bubble)
}

}
