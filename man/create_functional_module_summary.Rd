% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/descriptive_functions.R
\name{create_functional_module_summary}
\alias{create_functional_module_summary}
\title{Create comprehensive functional module summary}
\usage{
create_functional_module_summary(
  con,
  candidate_loci = NULL,
  blast_param_id = NULL,
  include_go = TRUE,
  include_kegg = TRUE,
  include_cog = TRUE,
  min_frequency = 2,
  verbose = TRUE
)
}
\arguments{
\item{con}{Database connection object}

\item{candidate_loci}{Data frame with chromosome and position columns, or NULL for all loci.}

\item{blast_param_id}{Integer. Specific BLAST parameter set to analyze. If NULL, analyzes all.}

\item{include_go}{Logical. Include GO term modules. Default is TRUE.}

\item{include_kegg}{Logical. Include KEGG pathway modules. Default is TRUE.}

\item{include_cog}{Logical. Include COG category analysis. Default is TRUE.}

\item{min_frequency}{Integer. Minimum frequency threshold for inclusion. Default is 2.}

\item{verbose}{Logical. Print progress information. Default is TRUE.}
}
\value{
List containing comprehensive functional module analysis:
\itemize{
\item overview: Summary statistics across all annotation types
\item go_modules: GO term functional modules (if include_go = TRUE)
\item kegg_modules: KEGG pathway functional modules (if include_kegg = TRUE)
\item cog_modules: COG functional group analysis (if include_cog = TRUE)
\item integrated_summary: Cross-platform functional summary
\item module_overlap: Analysis of overlapping functional themes
}
}
\description{
Generates an integrated summary of functional modules combining GO terms, KEGG pathways,
and COG categories for a comprehensive functional characterization.
}
\examples{
\dontrun{
con <- connect_funseq_db("analysis.db")

# Comprehensive module analysis for all loci
module_summary <- create_functional_module_summary(con)
print(module_summary$integrated_summary)

# Focus on candidate loci
candidates <- data.frame(chromosome = c("LG1", "LG2"), position = c(12345, 67890))
candidate_modules <- create_functional_module_summary(con, candidate_loci = candidates)

close_funseq_db(con)
}

}
